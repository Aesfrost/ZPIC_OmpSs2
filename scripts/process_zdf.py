import numpy as np
import seaborn as sns
import pandas as pd
import matplotlib.pyplot as plt
import matplotlib.ticker as tkr
from matplotlib.colors import SymLogNorm
from math import floor, log10, copysign

import zdf.zdf as zdf

def plotMap(reference, parallel, info, title, iter, sim_name, version, filename, cmap = "inferno", center = None):
    '''
        Plot the maps generated by a reference and a parallel implementation of ZPIC, then compare the difference
        between them
        
        :param numpy array reference = map generated by the reference version
        :param numpy array parallel = map generated by the parallel version
        :param zdf info info = grid information from the ZDF file 
        :param str title = title of the heatmaps 
        :param int iter = iteration of the simulation
        :param str sim_name = simulation name
        :param str version = version of the parallel ZPIC
        :param str filename = filename for saving the graphs
        :param str cmap = color map used by the plot
        :param float center = center value for the colorbar 
        
    '''

    formatter = tkr.ScalarFormatter(useMathText = True)
    formatter.set_scientific(True)
    formatter.set_powerlimits((-1, 1))

    Xsize = int(info.grid.nx[0])
    Ysize = int(info.grid.nx[1])
    Xlabel = info.grid.axis[0].label
    Ylabel = info.grid.axis[1].label
    Xmin = round(info.grid.axis[0].min, 2)
    Xmax = round(info.grid.axis[0].max, 2)
    Ymin = round(info.grid.axis[1].min, 2)
    Ymax = round(info.grid.axis[1].max, 2)

    X = np.arange(Xmin, Xmax, (Xmax - Xmin) / Xsize)
    Y = np.arange(Ymin, Ymax, (Ymax - Ymin) / Ysize)

    error = parallel - reference

    reference_df = pd.DataFrame(reference, Y, X)
    parallel_df = pd.DataFrame(parallel, Y, X)
    error_df = pd.DataFrame(error, Y, X)
    
#     if sim_name == "lwfa":
#         print("LWFA detected - Only considering the region (0:110, 0:1000)")
#
#         reference = reference[0:110, 0:1000]
#         parallel = parallel[10:110, 0:1000]
#         error = error[0:110, 0:1000]

    error_flat = np.ravel(error)
    std_error = np.std(error)
    max_error = np.absolute(error).max()
    mean_error = np.mean(np.absolute(error))

    print("Max. Error:", max_error);
    print("Avg. Error:", mean_error);
    print("Standard Deviation (Error):", std_error)
    print("3 sigma (Error):", 3 * std_error, end = "\n\n")

    ticks = 5
    power_10 = 10 ** floor(log10(Xsize / ticks))
    xtick = int((floor(Xsize / power_10) * power_10) / ticks)
    power_10 = 10 ** floor(log10(Ysize))
    ytick = int((floor(Ysize / power_10) * power_10) / ticks)

    plt.figure(figsize = (15, 8))
    plt.suptitle("%s (Iteration = %d, %s)" % (title, iter, version), fontsize = 22)

    plt.subplot(2, 2, 1)
    sns.heatmap(reference_df, cmap = cmap, center = center, xticklabels = xtick, yticklabels = ytick, cbar_kws = {"format": formatter})
    plt.title("Reference", fontsize = 18)
    plt.xlabel("X1", fontsize = 16)
    plt.ylabel("X2", fontsize = 16)
    plt.xticks(fontsize = 12)
    plt.yticks(fontsize = 12)
    plt.gca().invert_yaxis()

    plt.subplot(2, 2, 2)
    sns.heatmap(parallel_df, cmap = cmap, center = center, xticklabels = xtick, yticklabels = ytick, cbar_kws = {"format": formatter})
    plt.title("Parallel", fontsize = 18)
    plt.xlabel("X1", fontsize = 16)
    plt.ylabel("X2", fontsize = 16)
    plt.xticks(fontsize = 12)
    plt.yticks(fontsize = 12)
    plt.gca().invert_yaxis()

    plt.subplot(2, 2, 3)
    sns.heatmap(error_df, cmap = "seismic", center = 0, xticklabels = xtick, yticklabels = ytick, cbar_kws = {"format": formatter})
    plt.title("Error", fontsize = 18)
    plt.xlabel("X1", fontsize = 16)
    plt.ylabel("X2", fontsize = 16)
    plt.xticks(fontsize = 12)
    plt.yticks(fontsize = 12)
    plt.gca().invert_yaxis()

    mask = np.absolute(error_flat - mean_error) > 3 * std_error
    error_flat = error_flat[mask]
    reference_values = reference.ravel()[mask]
    ones = np.ones(error_flat.size)

    plt.subplot(2, 2, 4)
    plt.plot(reference_values, error_flat, ".k", ms = 2)
    plt.plot(reference_values, ones * mean_error, "b")
    plt.plot(reference_values, ones * 3 * std_error + ones * mean_error, color = "red", ls = "--")
    plt.plot(reference_values, ones * -3 * std_error + ones * mean_error, color = "red", ls = "--")
    plt.title("Error Distribution")
    plt.xlabel("Serial Value (Reference)")
    plt.ylabel("Error")
    plt.xticks(fontsize = 12)
    plt.yticks(fontsize = 12)
    plt.legend(("Outliers", "Mean", "3 sigma"), fontsize = 14, loc = "center left", bbox_to_anchor = (1, 0.5))
    plt.ticklabel_format(style = "sci", axis = "y", scilimits = (0, 0), useMathText = True)
    plt.ticklabel_format(style = "sci", axis = "x", scilimits = (0, 0), useMathText = True)

    plt.subplots_adjust(top = 0.9, wspace = 0.25, hspace = 0.35)

#     plt.savefig("graphs/%s/%s_%s_%d.png" % (sim_name, filename, sim_name, iter), dpi = 300)


def plotPhaseSpace(reference, parallel, info, iter, version, sim_name):
    '''
        Plot the phase space map generated by a reference and a parallel implementation of ZPIC.
        Then plot the difference between the two versions
        
        :param numpy array reference = phase space map generated by the reference version
        :param numpy array parallel = phase space map generated by the parallel version
        :param zdf info info = phasespace info from the ZDF file 
        :param int iter = iteration of the simulation
        :param str version = version of the parallel ZPIC
        :param str sim_name = simulation name
    '''
    
    ticks = 5
    cmap = "viridis_r"

    formatter = tkr.ScalarFormatter(useMathText = True)
    formatter.set_scientific(True)
    formatter.set_powerlimits((-1, 1))

    print("Detecting phase space parameters...")

    Xsize = info.grid.nx[0]
    Ysize = info.grid.nx[1]
    Xlabel = info.grid.axis[0].label
    Ylabel = info.grid.axis[1].label
    Xmin = info.grid.axis[0].min
    Xmax = info.grid.axis[0].max
    Ymin = info.grid.axis[1].min
    Ymax = info.grid.axis[1].max

    print("X axis =", Xlabel, "(unit:", info.grid.axis[0].units, " min:", Xmin, " max:", Xmax, end = ")\n")
    print("Y axis =", Ylabel, "(unit:", info.grid.axis[1].units, " min:", Ymin, " max:", Ymax, end = ")\n\n")

    error = parallel - reference

    reference_norm = SymLogNorm(linthresh = 1, vmin = reference.min(), vmax = reference.max(), base = 10)
    parallel_norm = SymLogNorm(linthresh = 1, vmin = parallel.min(), vmax = parallel.max(), base = 10)

    std_error = np.std(error)
    max_error = np.absolute(error).max()
    mean_error = np.mean(np.absolute(error))

    print("Max. Error:", max_error);
    print("Avg. Error:", mean_error);
    print("Standard Deviation (Error):", std_error)
    print("3 sigma (Error):", 3 * std_error, end = "\n\n")

    plt.figure(figsize = (15, 8))
    plt.suptitle("Phase Space - %s x %s (Iteration = %d, %s)" % (Xlabel, Ylabel, iter, version), fontsize = 22)

    plt.subplot(2, 2, 1)
    plt.title("Reference", fontsize = 18)
    sns.heatmap(reference, norm = reference_norm, cmap = cmap)
    plt.xticks(np.linspace(0, Xsize, ticks), np.linspace(Xmin, Xmax, ticks), fontsize = 12)
    plt.yticks(np.linspace(0, Ysize, ticks), np.linspace(Ymin, Ymax, ticks), fontsize = 12)
    plt.gca().invert_yaxis()
    plt.xlabel(Xlabel, fontsize = 16)
    plt.ylabel(Ylabel, fontsize = 16)

    plt.subplot(2, 2, 2)
    plt.title("Parallel", fontsize = 18)
    sns.heatmap(parallel, norm = parallel_norm, cmap = cmap)
    plt.xticks(np.linspace(0, Xsize, ticks), np.linspace(Xmin, Xmax, ticks), fontsize = 12)
    plt.yticks(np.linspace(0, Ysize, ticks), np.linspace(Ymin, Ymax, ticks), fontsize = 12)
    plt.gca().invert_yaxis()
    plt.xlabel(Xlabel, fontsize = 16)
    plt.ylabel(Ylabel, fontsize = 16)

    plt.subplot(2, 2, 3)
    plt.title("Error", fontsize = 18)
    sns.heatmap(error, cmap = "seismic", center = 0, cbar_kws = {"format": formatter})
    plt.xticks(np.linspace(0, Xsize, ticks), np.linspace(Xmin, Xmax, ticks), fontsize = 12)
    plt.yticks(np.linspace(0, Ysize, ticks), np.linspace(Ymin, Ymax, ticks), fontsize = 12)
    plt.gca().invert_yaxis()
    plt.xlabel(Xlabel, fontsize = 16)
    plt.ylabel(Ylabel, fontsize = 16)

    plt.subplots_adjust(top = 0.9, wspace = 0.25, hspace = 0.35)

#     plt.savefig("graphs/%s/phasespace_%s%s_%s_%d.png" % (sim_name, Xlabel, Ylabel, sim_name, iter), dpi = 300)


def calculateFieldMagnitude(type_fld, path, iter):
    '''
        Calculate the magnitude of the field.
        
        :param str type_fld = {"EFLD" or "BFLD"} type of field
        :param str path = directory in which the files are located 
        :param int iter = iteration of the simulation
    '''

    if type_fld == "EFLD":
        E1, info = zdf.read(path + "grid/E1-%06d.zdf" % (iter))
        E2, info = zdf.read(path + "grid/E2-%06d.zdf" % (iter))
        E3, info = zdf.read(path + "grid/E3-%06d.zdf" % (iter))

        return np.sqrt(E1 * E1 + E2 * E2 + E3 * E3), info

    elif type_fld == "BFLD":
        B1, info = zdf.read(path + "grid/B1-%06d.zdf" % (iter))
        B2, info = zdf.read(path + "grid/B2-%06d.zdf" % (iter))
        B3, info = zdf.read(path + "grid/B3-%06d.zdf" % (iter))

        return np.sqrt(B1 * B1 + B2 * B2 + B3 * B3), info

    else:
        return None, None


def processZDF(sim_name, sim_type, iter, version):
    '''
        Process the ZDF file created by ZPIC
        
        :param str sim_name = name of the simulation
        :param str sim_type = {"lwfa" or "weibel"} type of the simulation
        :param int iter = iteration of the simulation
        :param str version = version of the parallel ZPIC 
    '''

    # Reference Implementation
    referencepath = "../serial/output/" + sim_name + "/"
#     referencepath = "../parallel/ompss2/output/" + sim_name + "/"
    
    # Parallel Implementation
    parallelpath = "../parallel/" + version + "/output/" + sim_name + "/"

    # Electrons Charge Map
    print("Loading files(Electrons Charge Map)... ", end = "", flush = True)
    map_reference, info = zdf.read(referencepath + "electrons/charge-%06d.zdf" % (iter))
    map_parallel, info = zdf.read(parallelpath + "electrons/charge-%06d.zdf" % (iter))
    print("Done")

    plotMap(map_reference, map_parallel, info, "Electrons Charge Map", iter, sim_name, version, "electrons_charge", "inferno_r")

    if sim_type == "weibel":

         # Positrons Charge Map
        print("Loading files(Positrons Charge Map)... ", end = "", flush = True)
        map_reference, info = zdf.read(referencepath + "positrons/charge-%06d.zdf" % (iter))
        map_parallel, info = zdf.read(parallelpath + "positrons/charge-%06d.zdf" % (iter))
        print("Done")

        plotMap(map_reference, map_parallel, info, "Positrons Charge Map", iter, sim_name, version, "positrons_charge")

        # Current (Z axis)
        print("Loading files(Current (Z Axis))... ", end = "", flush = True)
        map_reference, info = zdf.read(referencepath + "grid/J3-%06d.zdf" % (iter))
        map_parallel, info = zdf.read(parallelpath + "grid/J3-%06d.zdf" % (iter))
        print("Done")

        plotMap(map_reference, map_parallel, info, "Current (Z Axis)", iter, sim_name, version, "current_z", "seismic", 0)

    elif sim_type == "lwfa":

        # Phase space
        print("Loading files (Phasespace)...", end = "", flush = True);
        reference, info = zdf.read(referencepath + "electrons/x1u1-%06d.zdf" % (iter))
        parallel, info = zdf.read(parallelpath + "electrons/x1u1-%06d.zdf" % (iter))
        print("Done")

        plotPhaseSpace(reference, parallel, info, iter, version, sim_name)

        # Electric Field
        print("Loading files(Electric Field)... ", end = "", flush = True)
        map_reference, info = calculateFieldMagnitude("EFLD", referencepath, iter)
        map_parallel, info = calculateFieldMagnitude("EFLD", parallelpath, iter)
        print("Done")

        plotMap(map_reference, map_parallel, info, "Electric Field Magnitude", iter, sim_name, version, "efield")

    # Magnetic Field
    print("Loading files(Magnetic Field)... ", end = "", flush = True)
    map_reference, info = calculateFieldMagnitude("BFLD", referencepath, iter)
    map_parallel, info = calculateFieldMagnitude("BFLD", parallelpath, iter)
    print("Done")

    plotMap(map_reference, map_parallel, info, "Magnetic Field Magnitude", iter, sim_name, version, "bfield")

    plt.show()


def energyPlot(sim_name, version):
    '''
        Compare the energy in the simulation for a serial and a parallel implementation
        
        :param str sim_name = name of the simulation
        :param str version = version of the parallel ZPIC 
    '''
    
    serialpath = "./serial/optimized/output/" + sim_name + "/"
    parallelpath = "./parallel/" + version + "/output/" + sim_name + "/"

    energy_serial = np.genfromtxt(fname = serialpath + "energy.csv", delimiter = ";")
    energy_parallel = np.genfromtxt(fname = parallelpath + "energy.csv", delimiter = ";")

    x = np.linspace(0, 50 * len(energy_serial[:, 0]), len(energy_serial[:, 0]))

    plt.figure(figsize = (20, 12))

    plt.subplot(2, 3, 1)
    plt.title("EMF Energy")
    plt.plot(x, energy_serial[:, 0], color = "orange", marker = "o", ms = 3.0)
    plt.plot(x, energy_parallel[:, 0], color = "blue", marker = "o", ms = 3.0)
    plt.ylim([0, max(1.1 * energy_serial[:, 0])])
    plt.ticklabel_format(style = "sci", axis = "y", scilimits = (0, 0), useMathText = True)

    plt.subplot(2, 3, 4)
    plt.title("EMF Energy - Error")
    plt.plot(x, energy_serial[:, 0] - energy_parallel[:, 0], ".r")

    plt.subplot(2, 3, 2)
    plt.title("Particle Energy")
    plt.plot(x, energy_serial[:, 1], color = "orange", marker = "o", ms = 3.0)
    plt.plot(x, energy_parallel[:, 1], color = "blue", marker = "o", ms = 3.0)
    plt.ylim([0, max(1.1 * energy_serial[:, 1])])
    plt.ticklabel_format(style = "sci", axis = "y", scilimits = (0, 0), useMathText = True)

    plt.subplot(2, 3, 5)
    plt.title("Particle Energy - Error")
    plt.plot(x, energy_serial[:, 1] - energy_parallel[:, 1], ".r")

    plt.subplot(2, 3, 3)
    plt.title("Total Energy")
    plt.plot(x, energy_serial[:, 2], color = "orange", marker = "o", ms = 3.0)
    plt.plot(x, energy_parallel[:, 2], color = "blue", marker = "o", ms = 3.0)
    plt.ylim([0, max(1.1 * energy_serial[:, 2])])
    plt.ticklabel_format(style = "sci", axis = "y", scilimits = (0, 0), useMathText = True)

    plt.subplot(2, 3, 6)
    plt.title("Total Energy - Error")
    plt.plot(x, energy_serial[:, 2] - energy_parallel[:, 2], ".r")

#     plt.savefig("graphs/%s/energy.png" % (sim_name), dpi = 300)
    plt.show()


if __name__ == "__main__":
#     processZDF("lwfa-2000-6M-2000-400","lwfa", 2000, "opencl")
#     processZDF("lwfa-4000-16M-2000-512", "lwfa", 4000, "openacc_multigpu")
#     processZDF("weibel-500-6M-600-600", "weibel", 500, "opencl")
    processZDF("weibel-500-4M-512-512", "weibel", 500, "ompss2")

#     energyPlot("lwfa", "rows")
#     energyPlot("larger_lwfa", "rows")
#     energyPlot("larger_weibel", "rows")

